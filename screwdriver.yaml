---
# Shared definition block
# This is where you would define any attributes that all your jobs will
# inherit. In our example, we state that all our Jobs will use the same Docker
# container for building in, as well as have a common environment variable set
shared:
  # Docker image to use as the desired build container. This typically takes the
  # form of "repo_name". Alternatively, you can define the image as
  # "repo_name:tag_label"
  # Docker image reference - https://hub.docker.com/_/golang/
  image: golang
  # A map of environment variables that we want to set
  environment:
    # We set the GOPATH to the build workspace. Eventually, this will be
    # accessible by another environment variable that we can reference instead
    # of hard-coding it here
    GOPATH: /sd/workspace
    # take off the robot$ part as it's basically impossible to pass through all the different
    # layers of var expansion. We add it in the Makefile
    HARBOR_USER: concourse-ci
  secrets:
    - HARBOR_PASSWORD

# Jobs definition block
# All pipelines have "main" by default, and is implicitly defined.
jobs:
  # We explicitly define "main" in our configuration so that it does what we
  # want it to do.
  main:
    # A single job name or array of jobs that will trigger the job to run.
    # Jobs defined with "requires: ~pr" are started by pull-request events.
    # Jobs defined with "requires: ~commit" are started by push events.
    # Jobs defined with "requires: ~sd@123:main" are started by job "main" from pipeline "123".
    # Jobs defined with "requires: deploy-west" are started after "deploy-west" is done.
    # Jobs defined with "requires: [deploy-west, deploy-east] are started after "deploy-west" and "deploy-east" are both done running successfully.
    requires:
      - ~pr
      - ~commit
    # Steps is the ordered list of commands to execute.
    # Each step takes the form "step_name: command_to_run". The "step_name" is a
    # convient label to reference it by. The "command_to_run" is the single
    # command that is executed during the step.
    steps:
      # Go commands document - https://golang.org/cmd/go/
      - env: env
      # This step downloads and installs packages and dependencies
      # - get: go get -t ./...
      # # The "vet" step runs the go tool vet on packages
      # - vet: go vet ./...
      # # This step runs gofmt on package resources
      # - gofmt: "find . -name '*.go' | xargs gofmt -s -w"
      # # The "test" step tests the packages
      # - test: go test ./...
      # # Compiles the packages and dependencies
      # - build: go build -o echoserver -a ./...

  docker-stuff:
    requires:
      - ~pr
      - main
    # image: gcr.io/uber-container-tools/makisu  # docker:dind
    # annotations:
      # screwdriver.cd/dockerEnabled: true
    steps:
      - env: env
      - go-env: go env ; ls /go/bin
      - install-upx: apt-get update ; apt-get -y install upx
      - install-makisu: go get github.com/uber/makisu/bin/makisu
      - find-cacerts: find / -name cacerts.pem
      - cp-makisu-cacerts: mkdir -p /makisu-internal/certs; cp /sd/workspace/pkg/mod/github.com/uber/makisu@v0.1.14/assets/cacerts.pem /makisu-internal/certs/cacerts.pem
      - ls-cacerts: ls -lah /makisu-internal/certs
      - set-go-bin-path: export PATH=$PATH:$GOPATH/bin
      - build_prod: make build_production
      - compress: make compress
      - image: make image
